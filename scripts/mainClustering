#===== Classification Tools =====#
from classes.commons.classification_functions import load_training_data_with_window_from_person, calculating_features
#===== Machine Learn =====#
from sklearn.cluster import MeanShift
#===== Utils =====#
import numpy as np

def load_train_test_outlier_for_each_person(dataset, filename, tablename, features, label, window_len, person_indexes, person_column):
    list_train_features = []
    list_train_labels = []
    list_test_features = []
    list_test_labels = []
    for person_index in person_indexes:
        training, test = load_training_data_with_window_from_person(dataset, filename, tablename, features,
                                                                    label, window_len, person_index, person_column)
        training_features, training_labels = calculating_features(training, x_label="x", y_label="y", z_label="z")
        test_features, test_labels = calculating_features(test, x_label="x", y_label="y", z_label="z")
        list_train_features.append(training_features)
        list_train_labels.append(training_labels)
        list_test_features.append(test_features)
        list_test_labels.append(test_labels)
    return list_train_features, list_train_labels, list_test_features, list_test_labels

def clusteringWithMeanShift(dataset, filename, tablename, features, label, window_len, person_indexes, person_column):
    list_train_features, list_train_labels, list_test_features, list_test_labels = load_train_test_outlier_for_each_person(dataset, filename, tablename, features, label, window_len, person_indexes, person_column)
    cluster = MeanShift().fit(list_train_features[1])
    #Print number of activities
    print("Number of activities: {}".format(len(np.unique(list_train_labels[1]))))
    #Print number of clusters
    labels = cluster.labels_
    #Ajustando Labels
    train_labels = list_train_labels[1]
    #train_labels[train_labels == 'backwardFall'] = 'fall';
    #train_labels[train_labels == 'forwardFall'] = 'fall';
    #train_labels[train_labels == 'lateralFall'] = 'fall';
    n_clusters = len(set(labels)) - (1 if -1 in labels else 0)
    for l in range(1,n_clusters+1):
        indexes = np.where(labels == l)
        print("========= Cluster {} ========".format(l))
        cluster_aux = labels[indexes]
        train_labels_aux = train_labels[indexes]
        unique_activities = np.unique(train_labels_aux)
        activities_proportions = []
        for ua in unique_activities:
            ap = np.where(train_labels_aux == ua)
            p = (len(ap[0])/len(train_labels_aux))*100
            print("Activities found: {} - {}%".format(ua, p))
        print("---------------------------------")


